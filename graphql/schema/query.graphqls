type Query {
  version: String!
  workers: WorkersQuery!
  health: HealthQuery!
  queue: QueueQuery!
  torrent: TorrentQuery!
  torrentContent: TorrentContentQuery!
  peerTrace: PeerTraceQuery!
}

type TorrentQuery {
  files(input: TorrentFilesQueryInput!): TorrentFilesQueryResult!
  listSources: TorrentListSourcesResult!
  suggestTags(input: SuggestTagsQueryInput): TorrentSuggestTagsResult!
  metrics(input: TorrentMetricsQueryInput!): TorrentMetricsQueryResult!
}

input SuggestTagsQueryInput {
  prefix: String
  exclusions: [String!]
}

type TorrentSuggestTagsResult {
  suggestions: [SuggestedTag!]!
}

type TorrentListSourcesResult {
  sources: [TorrentSource!]!
}

type SuggestedTag {
  name: String!
  count: Int!
}

type TorrentContentQuery {
  search(input: TorrentContentSearchQueryInput!): TorrentContentSearchResult!
}

type Worker {
  key: String!
  started: Boolean!
}

type WorkersListAllQueryResult {
  workers: [Worker!]!
}

type WorkersQuery {
  listAll: WorkersListAllQueryResult!
}

enum HealthStatus {
  unknown
  inactive
  up
  down
}

type HealthCheck {
  key: String!
  status: HealthStatus!
  timestamp: DateTime!
  error: String
}

type HealthQuery {
  status: HealthStatus!
  checks: [HealthCheck!]!
}

type PeerTraceTorrentsTrace {
  torrent:Torrent!
  lastSeenTime:DateTime!
}

type PeerTraceTorrentsTraceResult{
  torrentTraces: [PeerTraceTorrentsTrace!]!
}

type PeerTraceQuery{
  peerTrace: [PeerTrace!]!
  filteredTraces(
    input: PeerTraceFilterInput!
  ): [PeerTrace!]!
  torrentsByIP(ip:String!): PeerTraceTorrentsTraceResult!
}

input PeerTraceFilterInput {
  ip: String
  infoHash: Hash20
  limit: Int = 200
}
